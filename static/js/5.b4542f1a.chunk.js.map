{"version":3,"sources":["components/Dialogs/DialogsContainer.jsx"],"names":["DialogsContainer","compose","connect","state","dialogsPage","dispatch","changeTextarea","text","updateNewMessageBodyCreateAction","sendPost","post","sendMessageCreateAction","withAuthRedirect","Dialogs"],"mappings":"gHAAA,kEAkDIA,GAlDJ,KAkDuBC,YACrBC,aAfoB,SAAUC,GAC9B,MAAO,CACLC,YAAaD,EAAMC,gBAKE,SAAUC,GACjC,MAAO,CACLC,eAAgB,SAACC,GAAWF,EAASG,YAAiCD,KACtEE,SAAU,SAACC,GAAD,OAAUL,EAASM,YAAwBD,SAMvDE,IAFqBX,CAGrBY,MAQab","file":"static/js/5.b4542f1a.chunk.js","sourcesContent":["import React from 'react';\nimport Dialogs from './Dialogs';\nimport { sendMessageCreateAction, updateNewMessageBodyCreateAction } from '../../Redux/dialogs-reducer';\nimport StoreContext from '../../StoreContext';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport { withAuthRedirect } from '../../HOC/withAuthRedirect';\nimport { compose } from 'redux';\n\n\n\nconst forStoreContext_DialogsContainer = (props) => {\n\n  return <StoreContext.Consumer>{\n    (store) => {\n      function commitChangesTextarea(text) {\n        store.dispatch(updateNewMessageBodyCreateAction(text));\n      }\n      function sendPost() {\n        store.dispatch(sendMessageCreateAction());\n      }\n\n      return <Dialogs\n        dialogsPage={store.getState().dialogsPage}\n        changeTextarea={commitChangesTextarea}\n        sendPost={sendPost}\n\n      />\n    }\n  }\n  </StoreContext.Consumer>\n}\n\n\n// let authRedirectComponent = withAuthRedirect(Dialogs);  // HOC redirect if login\n\nlet mapStateToProps = function (state) {\n  return {\n    dialogsPage: state.dialogsPage,\n  }\n}\n\n\nlet mapDispatchToProps = function (dispatch) {\n  return {\n    changeTextarea: (text) => { dispatch(updateNewMessageBodyCreateAction(text)) },\n    sendPost: (post) => dispatch(sendMessageCreateAction(post)),\n  }\n}\n\nlet DialogsContainer = compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(Dialogs);\n\n\n// let DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(authRedirectComponent);\n\n\n\n// DialogsContainer > compose { withAuthRedirect > connect(maps)(Dialogs) } >>\nexport default DialogsContainer;  "],"sourceRoot":""}