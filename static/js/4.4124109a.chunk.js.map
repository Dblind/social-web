{"version":3,"sources":["components/Dialogs/DialogsContainer.jsx","components/Profile/ProfileContainer.jsx"],"names":["DialogsContainer","compose","connect","state","dialogsPage","dispatch","changeTextarea","text","updateNewMessageBodyCreateAction","sendPost","post","sendMessageCreateAction","withAuthRedirect","Dialogs","ProfileContainer","props","userId","this","match","params","authorizedUserId","history","push","getProfileFromServer","getUserProfile","getUserStatus","prevProps","mathOperator","temp","Number","setState","console","log","class","css","content","onClick","iteratePage","profileAPI","putPhoto","React","Component","authRedirectComponent","mapDispatchToProps","updateStatus","withRouter","profile","profilePage","status","auth","isAuth","isAuthorized"],"mappings":"kHAAA,kEAkDIA,GAlDJ,KAkDuBC,YACrBC,aAfoB,SAAUC,GAC9B,MAAO,CACLC,YAAaD,EAAMC,gBAKE,SAAUC,GACjC,MAAO,CACLC,eAAgB,SAACC,GAAWF,EAASG,YAAiCD,KACtEE,SAAU,SAACC,GAAD,OAAUL,EAASM,YAAwBD,SAMvDE,IAFqBX,CAGrBY,MAQab,a,sNC7CTc,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDZ,MAAQ,CACXa,OAAQ,GAHO,E,qDAOnB,WACEC,KAAKd,MAAMa,OAASC,KAAKF,MAAMG,MAAMC,OAAOH,OACvCC,KAAKd,MAAMa,SACdC,KAAKd,MAAMa,OAASC,KAAKF,MAAMK,iBAC1BH,KAAKd,MAAMa,QAAQC,KAAKF,MAAMM,QAAQC,KAAK,WAElDL,KAAKM,yB,kCAIP,WACEN,KAAKF,MAAMS,eAAeP,KAAKd,MAAMa,QACrCC,KAAKF,MAAMU,cAAcR,KAAKd,MAAMa,U,gCAGtC,SAAmBU,M,yBAInB,SAAYC,GACV,IAAIC,EAAO,EACX,OAAQD,GACN,IAAK,IAAOC,EAAOC,OAAOZ,KAAKd,MAAMa,QAAU,EAAG,MAClD,IAAK,IAAOY,EAAOC,OAAOZ,KAAKd,MAAMa,QAAU,EAAG,MAClD,QAAS,OAGXC,KAAKa,SAAS,CAAEd,OAAQY,IACxBG,QAAQC,IAAI,KAAMf,KAAKd,MAAMa,U,oBAI/B,WAAU,IAAD,OAEP,OACE,sBAAKiB,MAAOC,IAAIC,QAAhB,UACE,wBAAQC,QAAS,WAAQ,EAAKC,YAAY,MAA1C,eACA,wBAAQD,QAAS,WAAQ,EAAKC,YAAY,MAA1C,eAEA,wBAAQD,QAAS,WACfE,IAAWC,WACXR,QAAQC,IAAI,cAFd,uBAKA,cAAC,IAAD,eAAaf,KAAKF,e,GApDKyB,IAAMC,WA2DjCC,EAAwB9B,YAAiBE,GAkBzC6B,EAAqB,CACvBnB,mBACAC,kBACAmB,kBAIkCC,YAAWH,GAKhCzC,sBACbC,aAvBoB,SAACC,GACrB,MAAO,CACL2C,QAAS3C,EAAM4C,YAAYD,QAE3BE,OAAQ7C,EAAM4C,YAAYC,OAC1B5B,iBAAkBjB,EAAM8C,KAAKjC,OAC7BkC,OAAQ/C,EAAM8C,KAAKE,gBAiBIR,GACzBE,IAFa5C,CAIba","file":"static/js/4.4124109a.chunk.js","sourcesContent":["import React from 'react';\nimport Dialogs from './Dialogs';\nimport { sendMessageCreateAction, updateNewMessageBodyCreateAction } from '../../Redux/dialogs-reducer';\nimport StoreContext from '../../StoreContext';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport { withAuthRedirect } from '../../HOC/withAuthRedirect';\nimport { compose } from 'redux';\n\n\n\nconst forStoreContext_DialogsContainer = (props) => {\n\n  return <StoreContext.Consumer>{\n    (store) => {\n      function commitChangesTextarea(text) {\n        store.dispatch(updateNewMessageBodyCreateAction(text));\n      }\n      function sendPost() {\n        store.dispatch(sendMessageCreateAction());\n      }\n\n      return <Dialogs\n        dialogsPage={store.getState().dialogsPage}\n        changeTextarea={commitChangesTextarea}\n        sendPost={sendPost}\n\n      />\n    }\n  }\n  </StoreContext.Consumer>\n}\n\n\n// let authRedirectComponent = withAuthRedirect(Dialogs);  // HOC redirect if login\n\nlet mapStateToProps = function (state) {\n  return {\n    dialogsPage: state.dialogsPage,\n  }\n}\n\n\nlet mapDispatchToProps = function (dispatch) {\n  return {\n    changeTextarea: (text) => { dispatch(updateNewMessageBodyCreateAction(text)) },\n    sendPost: (post) => dispatch(sendMessageCreateAction(post)),\n  }\n}\n\nlet DialogsContainer = compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(Dialogs);\n\n\n// let DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(authRedirectComponent);\n\n\n\n// DialogsContainer > compose { withAuthRedirect > connect(maps)(Dialogs) } >>\nexport default DialogsContainer;  ","import React from 'react';\nimport css from './Profile.module.css';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\nimport Profile from './Profile';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { getUserProfile, getUserStatus, updateStatus } from '../../Redux/profile-reducer';\nimport { Redirect, withRouter } from 'react-router';\nimport { profileAPI, usersAPI } from '../../api/api';\nimport { withAuthRedirect } from '../../HOC/withAuthRedirect';\nimport DialogsContainer from '../Dialogs/DialogsContainer';\nimport { compose } from 'redux';\n\nlet myId = 19834;\n\nclass ProfileContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userId: 2,\n    }\n\n  }\n  componentDidMount() {\n    this.state.userId = this.props.match.params.userId; // ?? myId;\n    if (!this.state.userId) {\n      this.state.userId = this.props.authorizedUserId;\n      if (!this.state.userId) this.props.history.push(\"/login\");\n    }\n    this.getProfileFromServer();\n    // this.props.getUserStatus(this.state.userId);\n  }\n\n  getProfileFromServer() {\n    this.props.getUserProfile(this.state.userId);\n    this.props.getUserStatus(this.state.userId);\n  }\n\n  componentDidUpdate(prevProps) {\n    // this.getProfileFromServer();\n  }\n\n  iteratePage(mathOperator) {\n    let temp = 0;\n    switch (mathOperator) {\n      case \"+\": { temp = Number(this.state.userId) + 1; break; }\n      case \"-\": { temp = Number(this.state.userId) - 1; break; }\n      default: return;\n    }\n    // this.getProfileFromServer(temp);\n    this.setState({ userId: temp, });\n    console.log(\"+1\", this.state.userId);\n  }\n\n\n  render() {\n\n    return (\n      <div class={css.content}>\n        <button onClick={() => { this.iteratePage(\"+\"); } }>+</button>\n        <button onClick={() => { this.iteratePage(\"-\"); } }>-</button>\n\n        <button onClick={() => {\n          profileAPI.putPhoto();\n          console.log(\"put photo\");\n        }}>put photo</button>\n\n        <Profile {...this.props} />\n        {/* // profile={this.props.profile}/> */}\n      </div>\n    )\n  }\n}\n\nlet authRedirectComponent = withAuthRedirect(ProfileContainer);  // HOC redirect login\n\nlet authRedirectComponent_old = props => {\n  if (!props.isAuth) { console.log(props.isAuth); return <Redirect to=\"/login\" />; }\n\n  return <ProfileContainer {...props} />\n}\n\nlet mapStateToProps = (state) => {\n  return {\n    profile: state.profilePage.profile,\n    // isAuth: state.auth.isAuthorized,   // cut to withAuthRedirect.js\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuthorized,\n  }\n}\n\nlet mapDispatchToProps = {\n  getUserProfile,\n  getUserStatus,\n  updateStatus,\n}\n\n//  index.js => App => <BrowseRouter/> <Route /profile/:userId? > => connect()() => withRoute() => ContainerProfile => Profile\nlet WithUrlDataContainerComponent = withRouter(authRedirectComponent);\n\n\n// export default connect(mapStateToProps, mapDispatchToProps)(WithUrlDataContainerComponent);\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  withRouter,\n  // withAuthRedirect  // TODO: blocking and redirect to login page in time reload browser\n)(ProfileContainer);"],"sourceRoot":""}